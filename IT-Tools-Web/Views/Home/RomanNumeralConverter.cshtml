@{
    ViewData["Title"] = "Token Generator";
}
<h1>@ViewData["Title"]</h1>

<p>Convert Roman numerals to numbers and convert numbers to Roman numerals.</p>

<div class="container-sm my-4 p-4 border rounded bg-light" style="max-width: 600px;">
    <div class="mb-3 ">
        <label for="arabic-input" class="form-label">Arabic to Roman:</label>
        <input type="number" class="form-control" id="arabic-input" placeholder="Enter a number (1-3999)">
    </div>
    <div class="mb-3 d-flex align-items-center gap-2">
        <input type="text" class="form-control" id="roman-output" readonly placeholder="Roman numeral">
        <span class="btn btn-outline-secondary" onclick="copyText('roman-output', this)" title="Copy to clipboard">📋</span>
    </div>
 </div>

<div class="container-sm my-4 p-4 border rounded bg-light" style="max-width: 600px;">
    <div class="mb-3 mt-4">
        <label for="roman-input" class="form-label">Roman to Arabic:</label>
        <input type="text" class="form-control" id="roman-input" placeholder="Enter Roman numeral (e.g., XLII)">
    </div>
    <div class="mb-3 d-flex align-items-center gap-2">
        <input type="text" class="form-control" id="arabic-output" readonly placeholder="Arabic number">
        <span class="btn btn-outline-secondary" onclick="copyText('arabic-output', this)" title="Copy to clipboard">📋</span>
    </div>
</div>

<script>
    const romanMap = [
        [1000, 'M'],
        [900, 'CM'],
        [500, 'D'],
        [400, 'CD'],
        [100, 'C'],
        [90, 'XC'],
        [50, 'L'],
        [40, 'XL'],
        [10, 'X'],
        [9, 'IX'],
        [5, 'V'],
        [4, 'IV'],
        [1, 'I']
    ];

    function toRoman(num) {
        if (num < 1 || num > 3999) return "Invalid (1–3999)";
        let result = "";
        for (let [value, numeral] of romanMap) {
            while (num >= value) {
                result += numeral;
                num -= value;
            }
        }
        return result;
    }

    function fromRoman(str) {
        str = str.toUpperCase();
        let map = {I:1, V:5, X:10, L:50, C:100, D:500, M:1000};
        let total = 0, prev = 0;

        for (let i = str.length - 1; i >= 0; i--) {
            let curr = map[str[i]];
            if (!curr) return "Invalid Roman numeral";
            if (curr < prev) total -= curr;
            else total += curr;
            prev = curr;
        }
        return total;
    }

    document.getElementById('arabic-input').addEventListener('input', () => {
        const value = parseInt(document.getElementById('arabic-input').value);
        document.getElementById('roman-output').value = isNaN(value) ? '' : toRoman(value);
    });

    document.getElementById('roman-input').addEventListener('input', () => {
        const roman = document.getElementById('roman-input').value;
        const arabic = fromRoman(roman);
        document.getElementById('arabic-output').value = roman ? arabic : '';
    });

    function copyText(id, icon) {
        const input = document.getElementById(id);
        navigator.clipboard.writeText(input.value).then(() => {
            icon.setAttribute("title", "Copied!");
            const tooltip = new bootstrap.Tooltip(icon);
            tooltip.show();

            setTimeout(() => {
                icon.setAttribute("title", "Copy to clipboard");
                tooltip.dispose();
            }, 1500);
        });
    }
</script>
