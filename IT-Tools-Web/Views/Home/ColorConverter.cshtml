@{
    ViewData["Title"] = "Color converter";
}
<h1>@ViewData["Title"]</h1>

<p>Convert color between the different formats (hex, rgb, hsl and css name)</p>
<div class="container">
    <div class="card mx-auto" style="max-width: 600px;">
        <div class="card-body">
            <div class="mb-3 text-center">
                <label class="form-label">color picker:</label>
                <input type="color" class="form-control form-control-lg text-center" oninput="updateValue()" value="#ffffff">
                <span id="colorCode">#FFFFFFFF</span>
            </div>

            <!-- Color formats -->
            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">hex:</label>
                <input type="text" class="form-control me-2" readonly id="hex">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">rgb:</label>
                <input type="text" class="form-control me-2" readonly id="rgb">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">hsl:</label>
                <input type="text" class="form-control me-2" readonly id="hsl">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">hwb:</label>
                <input type="text" class="form-control me-2" readonly id="hwb">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">lch:</label>
                <input type="text" class="form-control me-2" readonly id="lch">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">cmyk:</label>
                <input type="text" class="form-control me-2" readonly id="cmyk">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

            <div class="mb-2 form-row d-flex align-items-center">
                <label class="form-label col-2">name:</label>
                <input type="text" class="form-control me-2" readonly id="name">
                <button class="btn-icon me-1" onclick="removeRow(this)">×</button>
                <button class="btn-icon" onclick="copyText(this)">📋</button>
            </div>

        </div>
    </div>
</div>

<script>  
    function updateValue() {  
        const colorPicker = document.querySelector('input[type="color"]');  
        const colorCode = document.getElementById('colorCode');  
        const hexInput = document.getElementById('hex');
        const rgbInput = document.getElementById('rgb');
        const hslInput = document.getElementById('hsl');
        const hwbInput = document.getElementById('hwb');
        const lchInput = document.getElementById('lch');
        const cmykInput = document.getElementById('cmyk');
        const nameInput = document.getElementById('name');

        const color = colorPicker.value;
        colorCode.textContent = color.toUpperCase() + 'FF';

        // Update hex
        hexInput.value = color.toUpperCase();

        // Convert to RGB
        const r = parseInt(color.slice(1, 3), 16);
        const g = parseInt(color.slice(3, 5), 16);
        const b = parseInt(color.slice(5, 7), 16);
        rgbInput.value = `rgb(${r}, ${g}, ${b})`;

        // Convert to HSL
        const rNorm = r / 255, gNorm = g / 255, bNorm = b / 255;
        const max = Math.max(rNorm, gNorm, bNorm), min = Math.min(rNorm, gNorm, bNorm);
        let h, s, l = (max + min) / 2;
        if (max === min) {
        h = s = 0;
        } else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
        case rNorm: h = (gNorm - bNorm) / d + (gNorm < bNorm ? 6 : 0); break;
        case gNorm: h = (bNorm - rNorm) / d + 2; break;
        case bNorm: h = (rNorm - gNorm) / d + 4; break;
        }
        h /= 6;
        }
        hslInput.value = `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;

        // Convert to HWB
        hwbInput.value = `hwb(${Math.round(h * 360)} ${Math.round((1 - max) * 100)}% ${Math.round(min * 100)}%)`;

        // Placeholder for LCH conversion
        lchInput.value = `lch(${Math.round(l * 100)}% 50 50)`;

        // Convert to CMYK
        const c = 1 - (r / 255);
        const m = 1 - (g / 255);
        const y = 1 - (b / 255);
        const k = Math.min(c, m, y);
        const cmykC = Math.round(((c - k) / (1 - k)) * 100) || 0;
        const cmykM = Math.round(((m - k) / (1 - k)) * 100) || 0;
        const cmykY = Math.round(((y - k) / (1 - k)) * 100) || 0;
        const cmykK = Math.round(k * 100);
        cmykInput.value = `device-cmyk(${cmykC}% ${cmykM}% ${cmykY}% ${cmykK}%)`;

        nameInput.value = getColorName(r, g, b);
    }

    function getColorName(r, g, b) {
        const colors = {
            "white": [255, 255, 255],
            "black": [0, 0, 0],
            "red": [255, 0, 0],
            "green": [0, 255, 0],
            "blue": [0, 0, 255],
            "palegoldenrod": [238, 232, 170]
        };

        let closestColor = "unknown";
        let minDistance = Infinity;

        for (const [name, [cr, cg, cb]] of Object.entries(colors)) {
            const distance = Math.sqrt((r - cr) ** 2 + (g - cg) ** 2 + (b - cb) ** 2);
            if (distance < minDistance) {
                minDistance = distance;
                closestColor = name;
            }
        }

        return closestColor;
    }

    function copyText(btn) {  
        const input = btn.parentElement.querySelector('input');  
        navigator.clipboard.writeText(input.value);  
        btn.textContent = '✅';  
        setTimeout(() => btn.textContent = '📋', 1500);  
    }  

    function removeRow(btn) {  
        const input = btn.parentElement.querySelector('input');  
        if (input) input.value = '';  
    }  
</script>