@{
    ViewData["Title"] = "IPv4 range expander";
}
<h1>@ViewData["Title"]</h1>

<p>Given a start and an end IPv4 address, this tool calculates a valid IPv4 subnet along with its CIDR notation.</p>
<div class="container py-5">
    <!-- Input fields -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="startIP" class="form-label">Start address</label>
            <input type="text" class="form-control" id="startIP" value="192.168.1.0">
            <small id="startError" class="text-danger" style="display: none;"></small>
        </div>
        <div class="col-md-6">
            <label for="endIP" class="form-label">End address</label>
            <input type="text" class="form-control" id="endIP" value="192.168.6.255">
            <small id="endError" class="text-danger" style="display: none;"></small>
        </div>
    </div>

    <!-- Result table -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover bg-white">
            <thead class="table-light">
                <tr>
                    <th></th>
                    <th>old value</th>
                    <th>new value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">Start address</th>
                    <td id="oldStart">192.168.1.0</td>
                    <td id="newStart">192.168.0.0</td>
                </tr>
                <tr>
                    <th scope="row">End address</th>
                    <td id="oldEnd">192.168.6.255</td>
                    <td id="newEnd">192.168.7.255</td>
                </tr>
                <tr>
                    <th scope="row">Addresses in range</th>
                    <td id="oldRange">1.536</td>
                    <td id="newRange">2.048</td>
                </tr>
                <tr>
                    <th scope="row">CIDR</th>
                    <td></td>
                    <td id="cidr">192.168.0.0/21</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
    function isValidIPv4(ip) {
        const ipv4Regex = /^(?!0)(?!.*\.$)(?!.*\.\.)(25[0-5]|2[0-4]\d|1?\d\d?)\.(25[0-5]|2[0-4]\d|1?\d\d?)\.(25[0-5]|2[0-4]\d|1?\d\d?)\.(25[0-5]|2[0-4]\d|1?\d\d?)$/;
        return ipv4Regex.test(ip);
    }

    function ipToInt(ip) {
        return ip.split('.').reduce((acc, part) => (acc << 8n) + BigInt(part), 0n);
    }

    function intToIp(int) {
        return [
            (int >> 24n) & 255n,
            (int >> 16n) & 255n,
            (int >> 8n) & 255n,
            int & 255n
        ].join('.');
    }

    function getCIDR(start, end) {
        let xor = start ^ end;
        let bits = 0;
        while (xor) {
            xor >>= 1n;
            bits++;
        }
        return 32 - bits;
    }

    function update() {
        const startIP = document.getElementById("startIP").value.trim();
        const endIP = document.getElementById("endIP").value.trim();
        const resultTable = document.querySelector(".table-responsive");
        const startError = document.getElementById("startError");
        const endError = document.getElementById("endError");

        let isValid = true;

        if (!isValidIPv4(startIP)) {
            startError.textContent = "Invalid IPv4 address.";
            startError.style.display = "block";
            isValid = false;
        } else {
            startError.style.display = "none";
        }

        if (!isValidIPv4(endIP)) {
            endError.textContent = "Invalid IPv4 address.";
            endError.style.display = "block";
            isValid = false;
        } else {
            endError.style.display = "none";
        }

        if (isValid) {
            const startInt = ipToInt(startIP);
            const endInt = ipToInt(endIP);

            if (startInt > endInt) {
                startError.textContent = "Start IP must be less than or equal to End IP.";
                startError.style.display = "block";
                endError.style.display = "none";
                resultTable.hidden = true;
                return;
            } else {
                startError.style.display = "none";
            }

            document.getElementById("oldStart").textContent = startIP;
            document.getElementById("oldEnd").textContent = endIP;
            document.getElementById("oldRange").textContent = (endInt - startInt + 1n).toLocaleString();

            const minBound = startInt < endInt ? startInt : endInt;
            const maxBound = startInt > endInt ? startInt : endInt;
            const cidrBits = getCIDR(minBound, maxBound);
            const mask = (0xFFFFFFFFn << (32n - BigInt(cidrBits))) & 0xFFFFFFFFn;

            const minIP = minBound & mask;
            const maxIP = minIP | (~mask & 0xFFFFFFFFn);
            const rangeCount = maxIP - minIP + 1n;

            document.getElementById("newStart").textContent = intToIp(minIP);
            document.getElementById("newEnd").textContent = intToIp(maxIP);
            document.getElementById("newRange").textContent = rangeCount.toLocaleString();
            document.getElementById("cidr").textContent = intToIp(minIP) + "/" + cidrBits;

            resultTable.hidden = false;
        } else {
            resultTable.hidden = true;
        }
    }

    document.getElementById("startIP").addEventListener("input", update);
    document.getElementById("endIP").addEventListener("input", update);

    update();
</script>